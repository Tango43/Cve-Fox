#!/usr/bin/python3
import json
import unicodedata
import datetime
import pymongo
from pymongo import MongoClient
from bson import json_util
import jsonlines
import sys
import os
import glob
from backports import csv
import io

client = MongoClient()

db = client['cves']

clientdb = client['cves']
watchlistdb = client['watchlist']

def comparetoasset(cve,asset):
    Confidence=0


    cve = json.loads(cve)
    #Load vendor string to find vendor in description if the vendor field is null
    if "null" in cve['vendor'].lower():
        Vendorfind = " " + asset['Vendor'] + " "

        if Vendorfind.lower() in cve['Description'].lower():
            Confidence=Confidence+15
            cve['Match'] = asset['Vendor']
    else:
        #If the vendor is not nul search for matches with asset vendor
        if asset['Vendor'].lower() == cve['vendor'].lower():
            Confidence=Confidence+30
            cve['Match'] = asset['Vendor']

    #Load product string to find product in description if the product field is null
    if "null" in cve['product'].lower():
        Productfind = " " + asset['Product'] + " "
        if Productfind.lower() in cve['Description'].lower():
            Confidence=Confidence+45
            try:
                cve['Match'] = cve['Match'] + ' - ' +asset['Product']
            except:
                cve['Match'] = asset['Product']
    else:
    #If there is a product name search for it
        if asset['Product'].lower() == cve['product'].lower():
            Confidence=Confidence+70
            try:
                cve['Match'] = cve['Match'] + ' - ' +asset['Product']
            except:
                cve['Match'] = asset['Product']

    ##Risk Calculations Dicitonary
    try:
        cvecia = { "Confidentiality": cve["Cvss"]["baseMetricV2"]["cvssV2"]["confidentialityImpact"], "Integrity": cve["Cvss"]["baseMetricV2"]["cvssV2"]["integrityImpact"], "Availability": cve["Cvss"]["baseMetricV2"]["cvssV2"]["availabilityImpact"]}

        for key, value in cvecia.items():
            if value == "NONE":
                cvecia[key] = "low"
            if value == "PARTIAL":
                cvecia[key] = "medium"
            if value == "COMPLETE":
                cvecia[key] = "high"

        lookupmatrix = {'low':{'low': 1, 'medium': 2, 'high': 3},
                        'medium':{'low': 2, 'medium': 3, 'high': 4},
                        'high':{'low': 3, 'medium': 4, 'high': 5}}


        if asset['Network(Exposure)'] == "internal":
            asset['Network(Exposure)'] = 1.2
        if asset['Network(Exposure)'] == "public":
            asset['Network(Exposure)'] = 2

        ## Risk Calculations
        maxcia = 0
        for key, value in cvecia.items():
            if lookupmatrix[value][asset[key]] > maxcia:
                maxcia = lookupmatrix[value][asset[key]]

        cve['Risk'] = (maxcia * asset['Network(Exposure)'])

    except:
        cve['Risk'] = 'Unknown'
    try:
        cve['Cvss'] = cve["Cvss"]["baseMetricV2"]["cvssV2"]["baseScore"]
    except:
        cve['Cvss'] = 'Unknown'


    cve['Environment'] = asset['Environment']
    ##End Risk Calculations
    if asset['FullMatch'] == 'yes':
        if Confidence>=60:
            cve['Confidence'] = Confidence
            cve['Affected_Host'] = asset['Name'] + '/' + asset['Vendor'] + '/' + asset['Product'] + '/' + asset['Version']
            cve['detect_time'] = json.loads(json.dumps(datetime.datetime.now().replace(microsecond=0).isoformat()))

            try:
                clientdb['potential'].insert(json_util.loads(json.dumps(cve)))
            except pymongo.errors.DuplicateKeyError:
                print("It already exists")
    else:
        if Confidence>=31:
            cve['Confidence'] = Confidence
            cve['Affected_Host'] = asset['Name'] + '/' + asset['Vendor'] + '/' + asset['Product'] + '/' + asset['Version']
            cve['detect_time'] = json.loads(json.dumps(datetime.datetime.now().replace(microsecond=0).isoformat()))

            try:
                clientdb['potential'].insert(json_util.loads(json.dumps(cve)))   
            except pymongo.errors.DuplicateKeyError:
                print("It already exists")

       
#Search files with the correct modified time and then run them through the asset finder
for cve in db.cve.find( { "Last_Modified" : {'$regex': ".*"+sys.argv[1]+".*"}}):
    cve = json_util.dumps(cve)
    for asset in watchlistdb['active'].find(): 
            comparetoasset(cve, asset)

