#!/usr/bin/python3
import flask
from flask import Flask, render_template, request, redirect, url_for
from pymongo import MongoClient, ASCENDING
import json
import os
from flask import jsonify
from bson import json_util
from flask_bootstrap import Bootstrap
from flask import send_from_directory
from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash



app = flask.Flask(__name__)
app.config["DEBUG"] = True

client = MongoClient()

bootstrap = Bootstrap(app)

auth = HTTPBasicAuth()
users = {
    "admin": generate_password_hash("admin123")
}

@auth.verify_password
def verify_password(username, password):
    if username in users:
        return check_password_hash(users.get(username), password)
    return False

@app.route('/potential')
@auth.login_required
def potential():
    cves = json_util.dumps(client['cves']['potential'].find({},
        {'_id':0,'ID':1,'detect_time':1,'Published':1,'product':1,'vendor':1,'Confidence':1,'Match':1,'Affected_Host':1,'Description':1,'Risk':1,'Cvss':1,'Environment':1
        }).sort("Confidence",ASCENDING))
    return render_template('potential.html', cves = json.loads(cves))

@app.route('/unassign')
@auth.login_required
def unassigned():
    cves = json_util.dumps(client['cves']['unassign'].find({},
        {'_id':0,'ID':1,'detect_time':1,'Published':1,'product':1,'vendor':1,'Confidence':1,'Match':1,'Affected_Host':1,'Description':1,'Risk':1,'Cvss':1,'Environment':1
        }).sort("Confidence",ASCENDING))
    return render_template('unassign.html', cves = json.loads(cves))

@app.route('/assign')
@auth.login_required
def assign():
    cves = json_util.dumps(client['cves']['assign'].find({},
        {'_id':0,'ID':1,'detect_time':1,'Published':1,'product':1,'vendor':1,'Confidence':1,'Match':1,'Affected_Host':1,'Description':1,'Risk':1,'Cvss':1,'Environment':1
        }).sort("Confidence",ASCENDING))
    return render_template('assign.html', cves = json.loads(cves))

@app.route('/watchlist')
@auth.login_required
def watchlist_get():
   assets = json_util.dumps(client['watchlist']['active'].find())
   return render_template('assetview.html', assets = json.loads(assets))

@app.route('/')
@auth.login_required
def reroute():
    return redirect(url_for('Cve_Database'))


@app.route('/Cve-Database')
@auth.login_required
def Cve_Database():
    os.system("../frontend/GraphGeneration.py")
    cvecount = json_util.dumps(client["cves"]["cve"].count({}))
    cveinpotential = json_util.dumps(client["cves"]["potential"].count({}))
    cveinunassign = json_util.dumps(client["cves"]["unassign"].count({}))
    cveinassign = json_util.dumps(client["cves"]["assign"].count({}))
    return render_template('cve_databaseview.html', cvecount=cvecount, cveinpotential=cveinpotential, cveinunassign=cveinunassign, cveinassign=cveinassign)

@app.route('/api/<state>/<cve_id>/<action>')
@auth.login_required
def action(state,cve_id,action):
    try:
        cve = client['cves'][state].find({"ID": cve_id })
        result = json_util.dumps(client['cves'][action].insert(cve))
        client['cves'][state].remove({"ID": cve_id })
    except:
        result = "{'message' :'Error'}"
    return redirect(url_for(state))

@app.route('/api/log')
@auth.login_required
def logreturn():
    findassetslog = json_util.dumps(client["log"]["cvetomongo"].find({}))

    return findassetslog

@app.route('/api/updatecvedb')
@auth.login_required
def getcvedb():
    os.system("../backend/cvetomongo.py") 
    return redirect(url_for('Cve_Database'))

@app.route('/api/matchdb')
@auth.login_required
def matchdb():
    os.system("../backend/findassets.py .*")
    return redirect(url_for('Cve_Database'))

app.run(host='0.0.0.0')
