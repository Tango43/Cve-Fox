#!/usr/bin/python
import requests
import json
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
from bson import json_util
from pymongo import MongoClient, ASCENDING


client = MongoClient()

cves = json.loads(json_util.dumps(client['cves']['potential'].find({},{'_id':0,'ID':1,'detect_time':1,'Published':1,'product':1,'vendor':1,'Confidence':1,'Match':1,'Affected_Host':1,'Description':1,'Risk':1,'Cvss':1,'Environment':1}).sort("Confidence",ASCENDING)))

#Stacked Bar Chart 100%
Lowbar = [0,0,0]
Mediumbar = [0,0,0]
Highbar = [0,0,0]
Unknownbar = [0,0,0]



for cve in cves:
    try:
        if cve['Risk'] > 7:
            if cve['Environment'] == 'Dev':
                Highbar[0] = Highbar[0] + 1
            if cve['Environment'] == 'Uat':
                Highbar[1] = Highbar[1] + 1
            if cve['Environment'] == 'Prod':
                Highbar[2] = Highbar[2] + 1


        if cve['Risk'] > 3:
                if cve['Risk'] < 7:
                    if cve['Environment'] == 'Dev':
                        Mediumbar[0] = Mediumbar[0] + 1
                    if cve['Environment'] == 'Uat':
                        Mediumbar[1] =  Mediumbar[1] + 1
                    if cve['Environment'] == 'Prod':
                        Mediumbar[2] = Mediumbar[2] + 1

        if cve['Risk'] < 3:
            if cve['vendor'] in cvedict['medium']:
                if cve['Environment'] == 'Dev':
                    Lowbar[0] = Lowbar[0] + 1
                if cve['Environment'] == 'Uat':
                    Lowbar[1] = Lowbar[1] + 1
                if cve['Environment'] == 'Prod':
                    Lowbar[2] = Lowbar[2] + 1
    except:
            if cve['Environment'] == 'Dev':
                Unknownbar[0] = Unknownbar[0] + 1
            if cve['Environment'] == 'Uat':
                Unknownbar[1] = Unknownbar[1] + 1
            if cve['Environment'] == 'Prod':
                Unknownbar[2] = Unknownbar[2] + 1



r = [0,1,2]

raw_data = {'Unknownbar': Unknownbar,'Lowbar':Lowbar, 'Mediumbar':Mediumbar, 'Highbar':Highbar}

df = pd.DataFrame(raw_data)

# From raw value to percentage
totals = [i+j+k+c for i,j,k,c in zip(df['Unknownbar'], df['Lowbar'], df['Mediumbar'], df['Highbar'])]
try:
    Lowbar = [i / j * 100 for i,j in zip(df['Lowbar'], totals)]
    Mediumbar = [i / j * 100 for i,j in zip(df['Mediumbar'], totals)]
    Highbar = [i / j * 100 for i,j in zip(df['Highbar'], totals)]
    Unknownbar  = [i / j * 100 for i,j in zip(df['Unknownbar'], totals)]
except:
    print("Debug Except")

# plot
barWidth = 0.4
names = ('Dev','Uat','Prod')
# Create green Bars
bar1 = plt.bar(r, Unknownbar, color='#385993', edgecolor='white', width=barWidth)
bar2 = plt.bar(r, Lowbar, bottom=Unknownbar, color='#00A14C', edgecolor='white', width=barWidth)
# Create orange Bars
bar3 = plt.bar(r, Mediumbar, bottom=[i+j for i,j in zip(Lowbar, Unknownbar)], color='#f3b80f', edgecolor='white', width=barWidth)
# Create blue Bars
bar4 =plt.bar(r, Highbar, bottom=[i+j+k for i,j,k in zip(Unknownbar, Lowbar, Mediumbar)], color='#CE2b01', edgecolor='white', width=barWidth)

# Custom x axis
plt.xticks(r, names)
plt.xlabel("Environment")
plt.suptitle('CVEs In Potential')

for spine in plt.gca().spines.values():
    spine.set_visible(False)
plt.tick_params(top='off', bottom='off', left='off', right='off', labelleft='off', labelbottom='on')

fig = matplotlib.pyplot.gcf()

fig.set_size_inches(8, 3.5)
fig.savefig('static/stackedbargraph.png', dpi=100, bbox_inches='tight')
